# This is a basic workflow to help you get started with Actions

name: Update Helm Chart Release

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v4
      - name: Get version from commit message
        id: get_commit_message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MESSAGE"
          # Extract the versioning flag (major, minor, or patch) from the commit message
          VERSION_TYPE=$(echo "$COMMIT_MESSAGE" | grep -oP '\[(major|minor|patch)\]' | tr -d '[]')
          
          if [ -z "$VERSION_TYPE" ]; then
            echo "No versioning flag found in commit message. Defaulting to 'patch'."
            VERSION_TYPE="patch"  # Default to 'patch' if no version flag is found
          fi
          
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV

      - name: Get Branch Name
        run: |          
          CURRENT_BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "Current branch: $CURRENT_BRANCH"
          echo "BRANCH_NAME=$CURRENT_BRANCH" >> $GITHUB_ENV  # Save the branch name for later steps

      - name: Update Helm Chart Version
        run: |
          echo "Updating Helm chart version to $VERSION_TYPE"
          
          cd ./chart/ohdsi/
          CURRENT_VERSION=$(grep '^version:' Chart.yaml | awk '{print $2}')
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          echo "deleting current package"
          rm ohdsi-$MAJOR.$MINOR.$PATCH.tgz
          shopt -s nocasematch
          if [ "$VERSION_TYPE" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$VERSION_TYPE" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ "$VERSION_TYPE" == "patch" ]; then
            PATCH=$((PATCH + 1))
          else
            echo "Usage: $0 {major|minor|patch}"
          fi
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          sed -i "s/^version: .*/version: ${NEW_VERSION}/" Chart.yaml
          echo "Version updated to ${NEW_VERSION}"

      - name: Update Helm chart index
        uses: WyriHaximus/github-action-helm3@v3
        with: 
          exec: |
            echo "Update index and package"
            cd ./chart/
            helm package ohdsi --destination ./ohdsi
            helm repo index --url https://raw.githubusercontent.com/mdaca/ohdsi-helm/$BRANCH_NAME/chart/ ./
            cat ./index.yaml

      - name: Commit changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add . 
          git commit -m "Update Helm chart for branch $BRANCH_NAME"
        
      - name: Push changes
        run: |
          git push https://github.com/${{ github.repository }} HEAD:${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
